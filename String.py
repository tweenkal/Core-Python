# ğŸ‘‰slicing string
# ğŸ‘‰Get the characters from position 2 to position 5 (not included):
b = "Hello, World!"
print(b[2:5])
# output:- llo

# ğŸ‘‰Get the characters from the start to position 5 (not included):
b = "Hello, World!"
print(b[:5])
# output:-Hello

# ğŸ‘‰Get the characters from position 2, and all the way to the end:
b = "Hello, World!"
print(b[2:])
# output:-llo, World!

# ğŸ‘‰From: "o" in "World!" (position -5)
# ğŸ‘‰To, but not included: "d" in "World!" (position -2):
b = "Hello, World!"
print(b[-5:-2])
# output:-orl

# ğŸ‘‰capitalize:-	Converts the first character to upper case
# ğŸ‘‰Upper case the first letter in this sentence:
txt = "hello, and welcome to my world."
x = txt.capitalize()
print (x)
# output:-Hello, and welcome to my world.

# ğŸ‘‰casefold:-Converts string into lower case
# ğŸ‘‰Make the string lower case:
txt = "Hello, And Welcome To My World!"
x = txt.casefold()
print(x)
# output:-hello, and welcome to my world!

# ğŸ‘‰center:-Returns a centered string
# ğŸ‘‰Print the word "banana", taking up the space of 20 characters, with
# "banana" in the middle:
txt = "banana"
x = txt.center(20)
print(x)
# output:-       banana

# ğŸ‘‰count:-Returns the number of times a specified value occurs in a string
# ğŸ‘‰Return the number of times the value "apple" appears in the string:
txt = "I love apples, apple are my favorite fruit"
x = txt.count("apple")
print(x)
# output:-2

#ğŸ‘‰ encode:-Returns an encoded version of the string
# ğŸ‘‰UTF-8 encode the string:
txt = "My name is StÃ¥le"
x = txt.encode()
print(x)
# output:-b'My name is St\xc3\xa5le'

# ğŸ‘‰endswith:-Returns true if the string ends with the specified value
# ğŸ‘‰Check if the string ends with a punctuation sign (.):
txt = "Hello, welcome to my world."
x = txt.endswith(".")
print(x)
# output:-True

# ğŸ‘‰expandtabs:-Sets the tab size of the string
# ğŸ‘‰Set the tab size to 2 whitespaces:
txt = "H\te\tl\tl\to"
x =  txt.expandtabs(2)
print(x)
# output:-H e l l o

# ğŸ‘‰find:-Searches the string for a specified value and returns the position of where it was found
# ğŸ‘‰Where in the text is the word "welcome"?:
txt = "Hello, welcome to my world."
x = txt.find("welcome")
print(x)
# output:-7

#ğŸ‘‰format:-Formats specified values in a string
# ğŸ‘‰Insert the price inside the placeholder, the price should be in fixed point, two-decimal format:
txt = "For only {price:.2f} dollars!"
print(txt.format(price = 49))
# output:-For only 49.00 dollars!

# ğŸ‘‰index:-Searches the string for a specified value and returns the position of where it was found
# ğŸ‘‰Where in the text is the word "welcome"?:
txt = "Hello, welcome to my world."
x = txt.index("welcome")
print(x)
# output:-7

# ğŸ‘‰isalnum:-Returns True if all characters in the string are alphanumeric
# ğŸ‘‰Check if all the characters in the text are alphanumeric:
txt = "Company12"
x = txt.isalnum()
print(x)
# output:-True

# ğŸ‘‰isalpha:-Returns True if all characters in the string are in the alphabet
# ğŸ‘‰Check if all the characters in the text are letters:
txt = "CompanyX"
x = txt.isalpha()
print(x)
# output:-True

#ğŸ‘‰isascii:-Returns True if all characters in the string are ascii characters
# ğŸ‘‰Check if all the characters in the text are ascii characters:
txt = "Company123"
x = txt.isascii()
print(x)
# output:-True

# ğŸ‘‰isdecimal:-Returns True if all characters in the string are decimals
# ğŸ‘‰Check if all the characters in a string are decimals (0-9):
txt = "1234"
x = txt.isdecimal()
print(x)
# output:-True

# ğŸ‘‰isdigit:-Returns True if all characters in the string are digits
# ğŸ‘‰Check if all the characters in the text are digits:
txt = "50800"
x = txt.isdigit()
print(x)
# output:-True

# ğŸ‘‰isidentifier:-Returns True if the string is an identifier
# ğŸ‘‰Check if the string is a valid identifier:
txt = "Demo"
x = txt.isidentifier()
print(x)
# output:-True

# ğŸ‘‰islower:-Returns True if all characters in the string are lower case
# ğŸ‘‰Check if all the characters in the text are in lower case:
txt = "hello world!"
x = txt.islower()
print(x)
# output:-True

# ğŸ‘‰isnumeric:-Returns True if all characters in the string are numeric
# ğŸ‘‰Check if all the characters in the text are numeric:
txt = "565543"
x = txt.isnumeric()
print(x)
# output:-True

# ğŸ‘‰isprintable:-Returns True if all characters in the string are printable
# ğŸ‘‰Check if all the characters in the text are printable:
txt = "Hello! Are you #1?"
x = txt.isprintable()
print(x)
# output:-True

#ğŸ‘‰isspace:-Returns True if all characters in the string are whitespaces
# ğŸ‘‰Check if all the characters in the text are whitespaces:
txt = "   "
x = txt.isspace()
print(x)
# output:-True

#ğŸ‘‰istitle:-	Returns True if the string follows the rules of a title
# ğŸ‘‰Check if each word start with an upper case letter:
txt = "Hello, And Welcome To My World!"
x = txt.istitle()
print(x)
# output:-True

# ğŸ‘‰isupper:-Returns True if all characters in the string are upper case
# ğŸ‘‰Check if all the characters in the text are in upper case:
txt = "THIS IS NOW!"
x = txt.isupper()
print(x)
# output:-True

# ğŸ‘‰join:-Joins the elements of an iterable to the end of the string
# ğŸ‘‰Join all items in a tuple into a string, using a hash character as separator:
myTuple = ("John", "Peter", "Vicky")
x = "#".join(myTuple)
print(x)
# output:-John#Peter#Vicky

# ğŸ‘‰ljust:-Returns a left justified version of the string
# ğŸ‘‰Return a 20 characters long, left justified version of the word "banana":
txt = "banana"
x = txt.ljust(20)
print(x, "is my favorite fruit.")
# output:-banana               is my favorite fruit.

# ğŸ‘‰lower:-Converts a string into lower case
# ğŸ‘‰Lower case the string:
txt = "Hello my FRIENDS"
x = txt.lower()
print(x)
# output:-hello my friends

# ğŸ‘‰lstrip:-Returns a left trim version of the string
# ğŸ‘‰Remove spaces to the left of the string:
txt = "     banana     "
x = txt.lstrip()
print("of all fruits", x, "is my favorite")
# output:-of all fruits banana      is my favorite

# ğŸ‘‰maketrans:-Returns a translation table to be used in translations
# ğŸ‘‰Create a mapping table, and use it in the translate() method to replace any "S" characters with a "P" character:
txt = "Hello Sam!"
mytable = str.maketrans("S", "P")
print(txt.translate(mytable))
# output:-Hello Pam!

#ğŸ‘‰ partition:-Returns a tuple where the string is parted into three parts
# ğŸ‘‰Search for the word "bananas", and return a tuple with three elements:
# 1 - everything before the "match"
# 2 - the "match"
# 3 - everything after the "match"
txt = "I could eat bananas all day"
x = txt.partition("bananas")
print(x)
# output:-('I could eat ', 'bananas', ' all day')

# ğŸ‘‰replace:-Returns a string where a specified value is replaced with a specified value
# ğŸ‘‰Replace the word "bananas":
txt = "I like bananas"
x = txt.replace("bananas", "apples")
print(x)
# output:-I like apples

# ğŸ‘‰rfind:-Searches the string for a specified value and returns the last position of where it was found
# ğŸ‘‰Where in the text is the last occurrence of the string "casa"?:
txt = "Mi casa, su casa."
x = txt.rfind("casa")
print(x)
# output:-12

#ğŸ‘‰rindex:- Searches the string for a specified value and returns the last position of where it was found
#ğŸ‘‰ Where in the text is the last occurrence of the string "casa"?:
txt = "Mi casa, su casa."
x = txt.rindex("casa")
print(x)
# output:-12

# ğŸ‘‰rjust:-Returns a right justified version of the string
# ğŸ‘‰Return a 20 characters long, right justified version of the word "banana":
txt = "banana"
x = txt.rjust(20)
print(x, "is my favorite fruit.")
# output:-              banana is my favorite fruit.

# ğŸ‘‰rpartition:-Returns a tuple where the string is parted into three parts
# ğŸ‘‰Search for the last occurrence of the word "bananas", and return a tuple with three elements:
# 1 - everything before the "match"
# 2 - the "match"
# 3 - everything after the "match"
txt = "I could eat bananas all day, bananas are my favorite fruit"
x = txt.rpartition("bananas")
print(x)
# output:-('I could eat bananas all day, ', 'bananas', ' are my favorite fruit')

# ğŸ‘‰rsplit:-Splits the string at the specified separator, and returns a list
# ğŸ‘‰Split a string into a list, using comma, followed by a space (, ) as the separator:
txt = "apple, banana, cherry"
x = txt.rsplit(", ")
print(x)
# output:-['apple', 'banana', 'cherry']

#ğŸ‘‰ rstrip:-Returns a right trim version of the string
# ğŸ‘‰Remove any white spaces at the end of the string:
txt = "     banana     "
x = txt.rstrip()
print("of all fruits", x, "is my favorite")
# output:-of all fruits      banana is my favorite

# ğŸ‘‰split:-Splits the string at the specified separator, and returns a list
# ğŸ‘‰Split a string into a list where each word is a list item:
txt = "welcome to the jungle"
x = txt.split()
print(x)
# output:-['welcome', 'to', 'the', 'jungle']

# ğŸ‘‰splitlines:-Splits the string at line breaks and returns a list
# ğŸ‘‰Split a string into a list where each line is a list item:
txt = "Thank you for the music\nWelcome to the jungle"
x = txt.splitlines()
print(x)
# output:-['Thank you for the music', 'Welcome to the jungle']

# ğŸ‘‰startswith:-Returns true if the string starts with the specified value
#ğŸ‘‰ Check if the string starts with "Hello":
txt = "Hello, welcome to my world."
x = txt.startswith("Hello")
print(x)
# output:-True

# ğŸ‘‰strip:-Returns a trimmed version of the string
# ğŸ‘‰Remove spaces at the beginning and at the end of the string:
txt = "     banana     "
x = txt.strip()
print("of all fruits", x, "is my favorite")
# output:-of all fruits banana is my favorite

# ğŸ‘‰swapcase:-Swaps cases, lower case becomes upper case and vice versa
# ğŸ‘‰Make the lower case letters upper case and the upper case letters lower case:
txt = "Hello My Name Is PETER"
x = txt.swapcase()
print(x)
# output:-hELLO mY nAME iS peter

# ğŸ‘‰title:-Converts the first character of each word to upper case
# ğŸ‘‰Make the first letter in each word upper case:
txt = "Welcome to my world"
x = txt.title()
print(x)
# output:-Welcome To My World

#ğŸ‘‰ translate:-Returns a translated string
# ğŸ‘‰Replace any "S" characters with a "P" character:
#use a dictionary with ascii codes to replace 83 (S) with 80 (P):
mydict = {83:  80}
txt = "Hello Sam!"
print(txt.translate(mydict))
# output:-Hello Pam!

# ğŸ‘‰upper:-Converts a string into upper case
# ğŸ‘‰Upper case the string:
txt = "Hello my friends"
x = txt.upper()
print(x)
# output:-HELLO MY FRIENDS

# ğŸ‘‰zfill:-Fills the string with a specified number of 0 values at the beginning
#ğŸ‘‰ Fill the string with zeros until it is 10 characters long:
txt = "50"
x = txt.zfill(10)
print(x)
# output:-0000000050

